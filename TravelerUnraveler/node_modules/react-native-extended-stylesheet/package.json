{
  "_args": [
    [
      {
        "raw": "react-native-extended-stylesheet@0.8.0",
        "scope": null,
        "escapedName": "react-native-extended-stylesheet",
        "name": "react-native-extended-stylesheet",
        "rawSpec": "0.8.0",
        "spec": "0.8.0",
        "type": "version"
      },
      "/Users/omar/Desktop/currency_converter/TravelerUnraveler"
    ]
  ],
  "_from": "react-native-extended-stylesheet@0.8.0",
  "_id": "react-native-extended-stylesheet@0.8.0",
  "_inCache": true,
  "_location": "/react-native-extended-stylesheet",
  "_nodeVersion": "8.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-extended-stylesheet-0.8.0.tgz_1509533787425_0.25822732015512884"
  },
  "_npmUser": {
    "name": "vitalets",
    "email": "noginsk@rambler.ru"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-extended-stylesheet@0.8.0",
    "scope": null,
    "escapedName": "react-native-extended-stylesheet",
    "name": "react-native-extended-stylesheet",
    "rawSpec": "0.8.0",
    "spec": "0.8.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-extended-stylesheet/-/react-native-extended-stylesheet-0.8.0.tgz",
  "_shasum": "28a59d3bd3f51131fcfb08a27d645e1d60b427e9",
  "_shrinkwrap": null,
  "_spec": "react-native-extended-stylesheet@0.8.0",
  "_where": "/Users/omar/Desktop/currency_converter/TravelerUnraveler",
  "author": {
    "name": "Vitaliy Potapov",
    "email": "noginsk@rambler.ru"
  },
  "bugs": {
    "url": "https://github.com/vitalets/react-native-extended-stylesheet/issues"
  },
  "dependencies": {
    "css-mediaquery": "^0.1.2",
    "object-resolve-path": "^1.1.0"
  },
  "description": "Extended StyleSheets for React Native",
  "devDependencies": {
    "babel-eslint": "^8.0.1",
    "babel-jest": "^21.2.0",
    "babel-plugin-runtyper": "^0.2.2",
    "babel-preset-react-native": "^4.0.0",
    "check-dependencies": "^1.1.0",
    "coveralls": "^3.0.0",
    "eslint": "^4.10.0",
    "eslint-plugin-import": "^2.8.0",
    "eslint-plugin-react": "^7.4.0",
    "eslint-plugin-react-native": "^3.1.0",
    "husky": "^0.14.3",
    "jest-cli": "^21.2.1",
    "lint-staged": "^4.3.0",
    "npm-run-all": "^4.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-/LrnoPwhLLc6sWHbCUhMNaCAxi52B1YL2IIyDHLGzps6hHsWJ3YdYUC9UmjaKSJJDJyaUnd6ojoOTZmh9mtajg==",
    "shasum": "28a59d3bd3f51131fcfb08a27d645e1d60b427e9",
    "tarball": "https://registry.npmjs.org/react-native-extended-stylesheet/-/react-native-extended-stylesheet-0.8.0.tgz"
  },
  "gitHead": "f58fa14d5bcd041bb3a4bb8da9d155d48a8614ec",
  "homepage": "https://github.com/vitalets/react-native-extended-stylesheet#readme",
  "jest": {
    "automock": false,
    "roots": [
      "src"
    ],
    "transform": {
      "^.+\\.js$": "babel-jest"
    },
    "verbose": true,
    "collectCoverage": false
  },
  "keywords": [
    "react",
    "react-native",
    "react-component",
    "react-native-component",
    "mobile",
    "ios",
    "android"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": "eslint"
  },
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "vitalets",
      "email": "noginsk@rambler.ru"
    }
  ],
  "name": "react-native-extended-stylesheet",
  "optionalDependencies": {},
  "readme": "# React Native Extended StyleSheet\n\n[![Build Status](https://travis-ci.org/vitalets/react-native-extended-stylesheet.svg?branch=master)](https://travis-ci.org/vitalets/react-native-extended-stylesheet)\n[![Coverage Status](https://coveralls.io/repos/github/vitalets/react-native-extended-stylesheet/badge.svg?branch=master)](https://coveralls.io/github/vitalets/react-native-extended-stylesheet?branch=master)\n[![npm version](https://badge.fury.io/js/react-native-extended-stylesheet.svg)](https://badge.fury.io/js/react-native-extended-stylesheet)\n[![license](https://img.shields.io/npm/l/react-native-extended-stylesheet.svg)](https://www.npmjs.com/package/react-native-extended-stylesheet)\n\nDrop-in replacement of [React Native StyleSheet](https://facebook.github.io/react-native/docs/stylesheet.html) with media-queries, variables, dynamic themes,\nrelative units, percents, math operations, scaling and other styling stuff.\n\n<img align=\"right\" src=\"https://cloud.githubusercontent.com/assets/1473072/26778748/49c190be-49eb-11e7-83a1-b06372df8d85.png\">\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Features](#features)\n  - [global variables](#global-variables)\n  - [local variables](#local-variables)\n  - [theming](#theming)\n  - [media queries](#media-queries)\n  - [math operations](#math-operations)\n  - [rem units](#rem-units)\n  - [percents](#percents)\n  - [scaling](#scaling)\n  - [underscored styles](#underscored-styles)\n  - [pseudo classes (:nth-child)](#pseudo-classes-nth-child)\n  - [value as a function](#value-as-a-function)\n  - [caching](#caching)\n  - [outline for debug](#outline-for-debug)\n  - [hot module reload](#hot-module-reload)\n- [API](#api)\n  - [.create()](#create)\n  - [.build()](#build)\n  - [.value()](#value)\n  - [.child()](#child)\n  - [.subscribe()](#subscribe)\n- [Caveats](#caveats)\n- [Changelog](#changelog)\n- [Feedback](#feedback)\n- [License](#license)\n\n## Installation\n```\nnpm i react-native-extended-stylesheet --save\n```\n\n## Usage\n1. Define styles using `EStyleSheet.create()` instead of `StyleSheet.create()`:\n\n  ```js\n  /* component.js */\n  import EStyleSheet from 'react-native-extended-stylesheet';\n  \n  // define extended styles \n  const styles = EStyleSheet.create({\n    column: {\n      width: '80%'                                    // 80% of screen width\n    },\n    text: {\n      color: '$textColor',                            // global variable $textColor\n      fontSize: '1.5rem'                              // relative REM unit\n    },\n    '@media (min-width: 350) and (max-width: 500)': { // media queries\n      text: {\n        fontSize: '2rem',\n      }\n    }\n  });\n  \n  // use styles as usual\n  class MyComponent extends React.Component {\n    render() {\n      return (\n        <View style={styles.column}>\n          <Text style={styles.text}>Hello</Text>\n        </View>\n      );\n    }\n  }  \n  ```\n\n2. In app entry point call `EStyleSheet.build()` to actually calculate styles:\n\n  ```js\n  /* app.js */\n  import EStyleSheet from 'react-native-extended-stylesheet';\n  \n  EStyleSheet.build({ // always call EStyleSheet.build() even if you don't use global variables!\n    $textColor: '#0275d8'\n  });\n  ```  \n  \n\\[[top](#react-native-extended-stylesheet)\\]\n\n## Features\n### Global variables\nGlobal variables are passed to `EStyleSheet.build()` and available in all stylesheets.\n```js\n// app entry: set global variables and calc styles\nEStyleSheet.build({\n  $textColor: '#0275d8'\n});\n\n// component: use global variables\nconst styles = EStyleSheet.create({\n  text: {\n    color: '$textColor'\n  }\n});\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Local variables\nLocal variables can be defined directly in sylesheet and have priority over global variables.\nTo define local variable just start it with `$`:\n```js\nconst styles = EStyleSheet.create({\n  $textColor: '#0275d8',\n  text: {\n    color: '$textColor'\n  },\n  icon: {\n    color: '$textColor'\n  },\n});\n```\nLocal variables are also available in result style: `styles.$textColor`.  \n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Theming\nChanging app theme contains two steps:\n1. re-build app styles\n2. re-render components tree with new styles\n\nTo re-build app styles you can call `EStyleSheet.build()` with new set of global variables:\n```js\nEStyleSheet.build({\n  $theme: 'light',  // required variable for caching!\n  $bgColor: 'white',\n});\n```\n> Please note that special variable **`$theme` is required** for proper caching of calculated styles.\n\nRe-rendering whole component tree is currently a bit tricky in React.  \nOne option is to wrap app into component and re-mount it on theme change:\n```js\n  toggleTheme() {\n    const theme = EStyleSheet.value('$theme') === 'light' ? darkTheme : lightTheme;\n    EStyleSheet.build(theme);\n    this.setState({render: false}, () => this.setState({render: true}));\n  }\n  render() {\n    return this.state.render ? <App/> : null;\n  }\n```\nThe caveat is that all components loss their state. \nIn the future it may be possible with `forceDeepUpdate()` method (see [facebook/react#7759](https://github.com/facebook/react/issues/7759)).  \nThe approach is open for discusison, feel free to share your ideas in [#22](https://github.com/vitalets/react-native-extended-stylesheet/issues/22), \n[#47](https://github.com/vitalets/react-native-extended-stylesheet/issues/47).\n\nFull theming example is [here](examples/theming).  \n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Media queries\nMedia queries allows to have different styles for different screens, platform and orienation.\nThey are supported as properties with `@media` prefix (thanks for idea to [@grabbou](https://github.com/grabbou),\n[#5](https://github.com/vitalets/react-native-extended-stylesheet/issues/5)).\n\nMedia queries can operate with the following values:\n\n* media type: `ios|android`\n* `width`, `min-width`, `max-width`\n* `height`, `min-height`, `max-height`\n* `orientation` (`landscape|portrait`)\n* `aspect-ratio`\n\nYou can use media queries on:\n* global level\n* sheet level\n* style level\n\nExamples:\n```js\n// global level\nEStyleSheet.build({\n  '@media ios': {\n    $fontSize: 12,\n  },\n  '@media android': {\n    $fontSize: 16,\n  },\n});\n\n// sheet level\nconst styles = EStyleSheet.create({\n  column: {\n    width: '80%',\n  },\n  '@media (min-width: 350) and (max-width: 500)': {\n    column: {\n      width: '90%',\n    }\n  }\n});\n\n// style level\nconst styles = EStyleSheet.create({\n  header: {\n    '@media ios': {\n      color: 'green',\n    },\n    '@media android': {\n      color: 'blue',\n    },\n  }\n});\n```\nSee full example [here](examples/media-queries).  \n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Math operations\nAny value can contain **one** of following math operations: `*`, `/`, `+`, `-`. Operands can be numbers, variables and percents.  \nFor example, to render circle you may create style:\n```js\nconst styles = EStyleSheet.create({\n  $size: 20,\n  circle: {\n    width: '$size',\n    height: '$size',\n    borderRadius: '0.5 * $size'\n  }\n});\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### REM units\nSimilar to [CSS3 rem unit](http://snook.ca/archives/html_and_css/font-size-with-rem) it allows to define any integer value as relative to the root element. In our case root value is special `rem` global variable that can be set in `EStyleSheet.build()`. It makes easy to scale app depending on screen size and other conditions. Default rem is `16`.\n```js\n// component\nconst styles = EStyleSheet.create({\n  text: {\n    fontSize: '1.5rem',\n    marginHorizontal: '2rem'\n  }\n});\n// app entry\nlet {height, width} = Dimensions.get('window');\nEStyleSheet.build({\n  rem: width > 340 ? 18 : 16\n});\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Percents\nPercent values are supported natively since React Native 0.43.\nEStyleSheet passes them through to original StyleSheet except cases, when you use calculations with percents,\ne.g. `\"100% - 20\"`. Percents are calculated relative to **screen width/height** on application launch.\n```js\nconst styles = EStyleSheet.create({\n  column: {\n    width: '100% - 20'\n  }\n});\n```\n\n**Percents in nested components**  \nIf you need sub-component with percent operations relative to parent component - you can achieve that with variables.  \nFor example, to render 2 sub-columns with 30%/70% width of parent column:\n```js\nrender() {\n  return (\n    <View style={styles.column}>\n      <View style={styles.subColumnLeft}></View>\n      <View style={styles.subColumnRight}></View>\n    </View>\n  );\n}\n\n...\n\nconst styles = EStyleSheet.create({\n  $columnWidth: '80%',\n  column: {\n    width: '$columnWidth',\n    flexDirection: 'row'\n  },\n  subColumnLeft: {\n    width: '0.3 * $columnWidth'\n  },\n  subColumnRight: {\n    width: '0.7 * $columnWidth'\n  }\n});\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Scaling\nYou can apply scale to components by setting special `$scale` variable. \n```js\nconst styles = EStyleSheet.create({\n  $scale: 1.5,\n  button: {\n    width: 100,\n    height: 20,\n    marginLeft: 10\n  }\n});\n```\nThis helps to create reusable components that could be scaled depending on prop:\n```js\nclass Button extends React.Component {\n  static propTypes = {\n    scale: React.PropTypes.number\n  };\n  render() {\n    let style = getStyle(this.props.scale)\n    return (\n      <View style={style.button}>\n      </View>\n    );\n  }\n}\n\nlet getStyle = function (scale = 1) {\n  return EStyleSheet.create({\n    $scale: scale,\n    button: {\n      width: 100,\n      height: 20,\n      marginLeft: 10\n    }\n  });\n}\n```\nTo cache calculated styles please have a look on [caching](#caching) section.  \n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Underscored styles\nOriginal react-native stylesheets are calculated to integer numbers and original values are unavailable. \nBut sometimes they are needed. Let's take an example:  \nYou want to render text and icon with the same size and color. \nYou can take this [awesome icon library](https://github.com/oblador/react-native-vector-icons) \nand see that `<Icon>` component has `size` and `color` props.\nIt would be convenient to define style for text and keep icon's size/color in sync.\n```js\nconst styles = EStyleSheet.create({\n  text: {\n    fontSize: '1rem',\n    color: 'gray'\n  }\n});\n```\nIn runtime `styles` created with original react's `StyleSheet` will look like:\n```js\nstyles = {\n  text: 0\n}\n```\nBut extended stylesheet saves calculated values under `_text` property:\n```js\nstyles = {\n  text: 0,\n  _text: {\n    fontSize: 16,\n    color: 'gray'\n  }\n}\n```\nTo render icon we just take styles from `_text`:\n```js\nreturn (\n  <View>\n    <Icon name=\"rocket\" size={styles._text.fontSize} color={styles._text.color} />\n    <Text style={styles.text}>Hello</Text>\n  </View>\n);\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Pseudo classes (:nth-child)\nExtended stylesheet supports 4 pseudo classes: `:first-child`, `:nth-child-even`, `:nth-child-odd`, `:last-child`. As well as in traditional CSS it allows to apply special styling for first/last items or render stripped rows.  \nTo get style for appropriate index you should use `EStyleSheet.child()` method. \nIt's signature: `EStyleSheet.child(stylesObj, styleName, index, count)`.\n```js\nconst styles = EStyleSheet.create({\n  row: {\n    fontSize: '1.5rem',\n    borderTopWidth: 1\n  },\n  'row:nth-child-even': {\n    backgroundColor: 'gray' // make stripped\n  },\n  'row:last-child': {\n    borderBottomWidth: 1 // render bottom edge for last row\n  }\n});\n...\nrender() {\n  return (\n    <View>\n      {items.map((item, index) => {\n        return (\n          <View key={index} style={EStyleSheet.child(styles, 'row', index, items.length)}></View>\n        );\n      })}\n    </View>\n  );\n}\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Value as a function\nFor the deepest customization you can specify any value as a function that will be executed on EStyleSheet build. \nFor example, you may *darken* or *lighten* color of variable via [npm color package](https://www.npmjs.com/package/color): \n```js\nimport Color from 'color';\nimport EStyleSheet from 'react-native-extended-stylesheet';\n\nEStyleSheet.build({\n  $buttonColor: 'green'\n});\n...\nconst styles = EStyleSheet.create({\n  button: {\n    backgroundColor: () => Color(EStyleSheet.value('$buttonColor')).darken(0.1).hexString()\n  }\n});\n...\nrender() {\n  return (\n    <TouchableHighlight style={styles.button}>\n      ...\n    </TouchableHighlight>\n  );\n}\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Caching\nIf you use dynamic styles depending on runtime prop or you are making reusable component with dynamic styling\nyou may need stylesheet creation in every `render()` call. Let's take example from [scaling](#scaling) section:\n```js\nclass Button extends React.Component {\n  static propTypes = {\n    scale: React.PropTypes.number\n  };\n  render() {\n    let style = getStyle(this.props.scale)\n    return (\n      <View style={style.button}>\n      </View>\n    );\n  }\n}\n\nlet getStyle = function (scale = 1) {\n  return EStyleSheet.create({\n    $scale: scale,\n    button: {\n      width: 100,\n      height: 20,\n      marginLeft: 10\n    }\n  });\n}\n```\nTo avoid creating styles on every render you can use [lodash.memoize](https://www.npmjs.com/package/lodash.memoize): \nstore result for particular parameters and returns it from cache when called with the same parameters. \nUpdated example:\n```js\nimport memoize from 'lodash.memoize';\n\nlet getStyle = memoize(function (scale = 1) {\n  return EStyleSheet.create({\n    $scale: scale,\n    button: {\n      width: 100,\n      height: 20,\n      marginLeft: 10\n    }\n  });\n});\n```\nNow if you call `getStyle(1.5)` 3 times actually style will be created on the first call \nand two other calls will get it from cache.  \n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Outline for debug\nIt is possible to outline all components that are using EStyleSheet. For that set global `$outline` variable:\n```js\nEStyleSheet.build({$outline: 1});\n```\n> Note that components without styles will not be outlined, \nbecause RN [does not support](https://github.com/facebook/react-native/issues/1768) default component styling yet.\n\nTo outline particular component set local `$outline` variable:\n```js\nconst styles = EStyleSheet.create({\n  $outline: 1,\n  column: {\n    width: '80%',\n    flexDirection: 'row'\n  },\n  ...\n});\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### Hot module reload\n[Hot module reload (HMR)](https://facebook.github.io/react-native/blog/2016/03/24/introducing-hot-reloading.html) \nallows you to change code and see live updates without loosing app state. It is very handy for tuning styles. \nEStyleSheet supports HMR with the following options:\n\n1. When you change style of component - the component is updated by HMR automatically without any affort from your side. \n2. When you change global variable or theme - you should use [HMR API](https://facebook.github.io/react-native/releases/next/#hmr-api) \n   to force style re-calculation:\n    ```js\n    // app.js\n    EStyleSheet.build({\n      $fontColor: 'black'\n    });\n    \n    ...\n    \n    module.hot.accept(() => {\n      EStyleSheet.clearCache();\n      EStyleSheet.build(); // force style re-calculation\n    });\n    ```\nSee full example of HMR [here](examples/hmr).  \n\\[[top](#react-native-extended-stylesheet)\\]\n\n## EStyleSheet API\n### .create()\n```js\n/**\n * Creates extended stylesheet object\n *\n * @param {Object} source style\n * @returns {Object} extended stylesheet object\n */\n create (source) {...}\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### .build()\n```js\n/**\n * Calculates all stylesheets\n *\n * @param {Object} [globalVars] global variables for all stylesheets\n */\n build (globalVars) {...}\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### .value()\n```js\n/**\n * Calculates particular value\n *\n * @param {*} value\n * @param {String} [prop] property for which value is calculated. Needed for example for percent values.\n * @returns {*} calculated result\n */\n value (value, prop) {...}\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### .child()\n```js\n/**\n * Returns styles with pseudo classes :first-child, :nth-child-even, :last-child according to index and count\n *\n * @param {Object} stylesheet\n * @param {String} styleName\n * @param {Number} index index of item for style\n * @param {Number} count total count of items\n * @returns {Object|Array} styles\n */\n child (styles, styleName, index, count) {...}\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n### .subscribe()\n```js\n/**\n * Subscribe to events. Currently only 'build' event is supported\n *\n * @param {String} event\n * @param {Function} listener\n */\n subscribe (event, listener) {...}\n\n```\nThis method is useful when you want to pre-render some component on init.\nAs extended style is calculated after call of `EStyleSheet.build()`,\nit is not available instantly after creation so you should wrap pre-render\ninfo listener to `build` event:\n```js\nconst styles = EStyleSheet.create({\n  button: {\n    width: '80%',\n  }\n});\n\n// this will NOT work as styles.button is not calculated yet\nlet Button = <View style={styles.button}></View>;\n\n// but this will work\nlet Button;\nEStyleSheet.subscribe('build', () => {\n  Button = <View style={styles.button}></View>;\n});\n```\n\\[[top](#react-native-extended-stylesheet)\\]\n\n## Caveats\n1. *Hot module reload is not supported yet*  \n   Hot module reload requires all components to be re-rendered and keep local state. Please follow [#16] for updates.\n\n2. *Dynamic theme change is possible only with loosing components local state*  \n   When theme styles are re-calculated - all components should be re-rendered.\n   Currently it can be done via re-mounting components tree, please see [#47].\n   > Note: it is not issue if you are using state container like [Redux](https://github.com/reactjs/redux)\n\n3. *Dynamic orientation change is not processed*  \n   Please see [#9] for more details.\n\n## Changelog\nPlease see [CHANGELOG.md](CHANGELOG.md)\n\n## Feedback\nIf you have any ideas or something goes wrong feel free to \n[open new issue](https://github.com/vitalets/react-native-extended-stylesheet/issues/new).\n\n## License\nMIT  \n\\[[top](#react-native-extended-stylesheet)\\]\n\n[#9]: https://github.com/vitalets/react-native-extended-stylesheet/issues/8\n[#16]: https://github.com/vitalets/react-native-extended-stylesheet/issues/16\n[#47]: https://github.com/vitalets/react-native-extended-stylesheet/issues/47\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/vitalets/react-native-extended-stylesheet.git"
  },
  "scripts": {
    "ci": "run-s code tt",
    "code": "check-dependencies && npm run lint",
    "coveralls": "coveralls < coverage/lcov.info",
    "deps": "npm ls --depth=0",
    "diff": "git diff -- . ':!package-lock.json'",
    "lint": "eslint src",
    "postrelease": "git push --follow-tags --no-verify",
    "precommit": "lint-staged",
    "prepush": "run-s code tt",
    "prerelease": "run-s code tt",
    "release": "npm version $VER && npm publish",
    "release-minor": "VER=minor npm run release",
    "release-patch": "VER=patch npm run release",
    "test": "jest --onlyChanged",
    "test-runtyper": "BABEL_ENV=runtyper jest --no-cache",
    "tt": "jest --coverage"
  },
  "version": "0.8.0"
}
